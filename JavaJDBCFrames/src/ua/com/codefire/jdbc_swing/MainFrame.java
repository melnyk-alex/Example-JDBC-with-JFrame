/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ua.com.codefire.jdbc_swing;

import java.awt.Window;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.sql.SQLException;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;
import ua.com.codefire.jdbc_swing.db.MySQLDAO;

/**
 *
 * @author human
 */
public class MainFrame extends javax.swing.JFrame {

    private MySQLDAO mysqldao;

    /**
     * Creates new form Main
     */
    public MainFrame() {
        this.mysqldao = new MySQLDAO(dbProperties);

        initComponents();

        setLocationRelativeTo(null);

        try {
            List<String> databaseList = mysqldao.getDatabaseList();
            DefaultComboBoxModel dcbm = new DefaultComboBoxModel(databaseList.toArray());
            jcbDatabases.setModel(dcbm);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jcbDatabases = new javax.swing.JComboBox<>();
        jbShowTables = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlTables = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtTableData = new javax.swing.JTable();
        jbDumpDatabase = new javax.swing.JButton();
        jmbMain = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiPreferences = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Select database: ");

        jbShowTables.setText("SHOW TABLES");
        jbShowTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbShowTablesActionPerformed(evt);
            }
        });

        jlTables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlTablesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jlTables);

        jtTableData.setAutoCreateRowSorter(true);
        jtTableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtTableData.setCellSelectionEnabled(true);
        jtTableData.setEditingRow(1);
        jtTableData.setShowGrid(true);
        jScrollPane2.setViewportView(jtTableData);

        jbDumpDatabase.setText("DUMP DATABASE");
        jbDumpDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDumpDatabaseActionPerformed(evt);
            }
        });

        jmFile.setText("File");

        jmiPreferences.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jmiPreferences.setText("Preferences");
        jmiPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPreferencesActionPerformed(evt);
            }
        });
        jmFile.add(jmiPreferences);
        jmFile.add(jSeparator1);

        jmiExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmFile.add(jmiExit);

        jmbMain.add(jmFile);

        setJMenuBar(jmbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbDatabases, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbShowTables)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbDumpDatabase)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbShowTables)
                    .addComponent(jcbDatabases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jbDumpDatabase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbShowTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbShowTablesActionPerformed

        String databaseName = jcbDatabases.getSelectedItem().toString();

        try {
            DefaultListModel dlm = new DefaultListModel();

            for (String tableName : mysqldao.getTablesList(databaseName)) {
                dlm.addElement(tableName);
            }

            jlTables.setModel(dlm);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jbShowTablesActionPerformed

    private void jlTablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlTablesMouseClicked

        if (evt.getClickCount() == 2 && jlTables.getSelectedIndex() >= 0) {
            String databaseName = jcbDatabases.getSelectedItem().toString();
            String tableName = jlTables.getSelectedValue();

            try {
                TableModel tableDataModel = mysqldao.getTableDataModel(databaseName, tableName);
                jtTableData.setModel(tableDataModel);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jlTablesMouseClicked

    private void jbDumpDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDumpDatabaseActionPerformed

        int answer = JOptionPane.showConfirmDialog(this, "Dump database with data?", "Database dump", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        switch (answer) {
            case JOptionPane.YES_OPTION: {
                // TODO: Do dump database structure with data.
                try {
                    String dumpDatabase = mysqldao.dumpDatabase(jcbDatabases.getSelectedItem().toString());
                    System.out.println(dumpDatabase);
                    
                    JFileChooser fileChooser = new JFileChooser(new File("").getAbsoluteFile());
                    fileChooser.setFileFilter(new FileNameExtensionFilter("SQL File", "sql"));
                    if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                        Path target = fileChooser.getSelectedFile().toPath();
                        try {
                            Files.copy(new ByteArrayInputStream(dumpDatabase.getBytes()), target, StandardCopyOption.REPLACE_EXISTING);
                        } catch (IOException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            break;
            case JOptionPane.NO_OPTION:
                // TODO: Do dump database only structure.
                break;
        }

    }//GEN-LAST:event_jbDumpDatabaseActionPerformed

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed

        dispose();

    }//GEN-LAST:event_jmiExitActionPerformed

    private void jmiPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPreferencesActionPerformed

        boolean exists = false;

        for (Window window : getWindows()) {
            if (window instanceof PreferenceFrame) {
                exists = true;
                window.setVisible(true);
                break;
            }
        }

        if (!exists) {
            PreferenceFrame preferenceFrame = new PreferenceFrame();
            preferenceFrame.setLocationRelativeTo(this);
            preferenceFrame.setVisible(true);
        }

    }//GEN-LAST:event_jmiPreferencesActionPerformed

    private static Properties dbProperties;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            Class.forName(com.mysql.jdbc.Driver.class.getName());
        } catch (ClassNotFoundException ex) {
        }

        dbProperties = new Properties();

        try {
            dbProperties.load(new FileInputStream("db.properties"));
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JButton jbDumpDatabase;
    private javax.swing.JButton jbShowTables;
    private javax.swing.JComboBox<String> jcbDatabases;
    private javax.swing.JList<String> jlTables;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenuBar jmbMain;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiPreferences;
    private javax.swing.JTable jtTableData;
    // End of variables declaration//GEN-END:variables
}
